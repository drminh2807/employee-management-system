{"version":3,"sources":["screens/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["provider","firebase","GoogleAuthProvider","SignIn","state","onSignInPress","signInWithPopup","then","result","credential","accessToken","user","console","log","catch","error","code","message","email","className","Container","Row","Col","xs","order","type","Component","App","Boolean","window","location","hostname","match","require","config","parsed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAMMA,G,YAAW,IAAIC,OAAcC,oBAEdC,E,2MACjBC,MAAQ,G,EAERC,cAAgB,WACZJ,SAAgBK,gBAAgBN,GAAUO,KAAK,SAACC,GAE9BA,EAAOC,WAAWC,YAAhC,IAEQC,EAASH,EAATG,KAERC,QAAQC,IAAI,CAAEF,WACfG,MAAM,SAACC,GAEYA,EAAMC,KACHD,EAAME,QAETF,EAAVG,MAEeH,EAAfN,WAERG,QAAQC,IAAI,CAAEE,a,wEAKlB,OACI,yBAAKI,UAAU,gDACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,6CAGR,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,4DAGR,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,MAAO,IACd,4BAAQC,KAAK,SAASN,UAAU,6BAAhC,6B,GAxCQO,aCyBrBC,MARf,WACI,OACI,yBAAKR,UAAU,OACX,kBAAC,EAAD,QChBQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXoBC,EAAQ,IAAUC,SAApCnB,E,EAAAA,MAAOoB,E,EAAAA,OAEXpB,GACAH,QAAQC,IAAI,CAAEE,UAGlBH,QAAQC,IAAI,CAAEsB,WAEdC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.437a77f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport './SignIn.css';\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport default class SignIn extends Component {\n    state = {}\n\n    onSignInPress = () => {\n        firebase.auth().signInWithPopup(provider).then((result) => {\n            // This gives you a Google Access Token. You can use it to access the Google API.\n            const token = result.credential.accessToken;\n            // The signed-in user info.\n            const { user } = result;\n            // ...\n            console.log({ user });\n        }).catch((error) => {\n            // Handle Errors here.\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // The email of the user's account used.\n            const { email } = error;\n            // The firebase.auth.AuthCredential type that was used.\n            const { credential } = error;\n            // ...\n            console.log({ error });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex align-items-center sign-in-background\">\n                <Container>\n                    <Row>\n                        <Col>\n                            <h1>Bright Soft</h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h3>Employee Management System</h3>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={{ order: 2 }}>\n                            <button type=\"button\" className=\"loginBtn loginBtn--google\">Login with Google</button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport * as firebase from 'firebase/app';\nimport SignIn from './screens/SignIn';\n\n// console.log(process.env);\n\n// const {\n//     FIREBASE_API_KEY, FIREBASE_AUTH_DOMAIN, FIREBASE_DATABASE_URL,\n//     FIREBASE_PROJECT_ID, FIREBASE_STORAGE_BUCKET, FIREBASE_MESSAGING_SENDER_ID,\n//     FIREBASE_APP_ID\n// } = process.env;\n\n// firebase.initializeApp({\n//     apiKey: FIREBASE_API_KEY,\n//     authDomain: FIREBASE_AUTH_DOMAIN,\n//     databaseURL: FIREBASE_DATABASE_URL,\n//     projectId: FIREBASE_PROJECT_ID,\n//     storageBucket: FIREBASE_STORAGE_BUCKET,\n//     messagingSenderId: FIREBASE_MESSAGING_SENDER_ID,\n//     appId: FIREBASE_APP_ID\n// });\n\n// firebase.auth().useDeviceLanguage();\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SignIn />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst { error, parsed } = require('dotenv').config();\n\nif (error) {\n    console.log({ error });\n}\n\nconsole.log({ parsed });\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}