{"version":3,"sources":["screens/SignIn.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["provider","firebase","GoogleAuthProvider","SignIn","state","onSignInClick","signInWithPopup","then","result","toast","success","user","displayName","catch","error","message","className","Container","Row","Col","xs","order","type","onClick","this","Component","Home","onLogoutClick","auth","signOut","currentUser","photoURL","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","alt","src","Item","process","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","useDeviceLanguage","App","renderBody","unscribleUser","onAuthStateChanged","setState","Boolean","window","location","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"maAOMA,G,YAAW,IAAIC,OAAcC,oBAEdC,E,2MACjBC,MAAQ,G,EAERC,cAAgB,WACZJ,SAAgBK,gBAAgBN,GAAUO,KAAK,SAACC,GAC5CC,IAAMC,QAAN,kBAAyBF,EAAOG,KAAKC,YAArC,QACDC,MAAM,SAACC,GACNL,IAAMK,MAAMA,EAAMC,Y,wEAKtB,OACI,yBAAKC,UAAU,gDACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,6CAGR,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,4DAGR,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,MAAO,IACd,4BAAQC,KAAK,SAASC,QAASC,KAAKnB,cAAeW,UAAU,6BAA7D,+B,GA3BQS,a,2BCHfC,G,iNACjBtB,MAAQ,G,EAERuB,cAAgB,WACZ1B,IAAS2B,OAAOC,W,wEAGV,IAAD,EAC6B5B,IAAS2B,OAAOE,YAA1ClB,EADH,EACGA,YAAamB,EADhB,EACgBA,SACrB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKlB,UAAU,2BACrC,kBAACgB,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,kBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKzB,UAAU,WACX,kBAACyB,EAAA,EAAIC,KAAL,CAAUN,KAAK,KAAf,sBAEJ,kBAACK,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAaC,MACT,oCACKhC,EACA,IACD,yBAAKiC,IAAKjC,EAAakC,IAAKf,EAAUf,UAAU,aAIpD,kBAAC2B,EAAA,EAAYI,KAAb,CAAkBxB,QAASC,KAAKG,eAAhC,oB,GA1BMF,c,ECS9BuB,geAP4BC,E,EAA5BC,2BACgCC,E,EAAhCC,+BACiCC,E,EAAjCC,gCAC+BC,E,EAA/BC,8BACmCC,E,EAAnCC,kCACwCC,E,EAAxCC,uCAC2BC,E,EAA3BC,0BAGJ7D,gBAAuB,CACnBgD,SACAE,aACAE,cACAE,YACAE,gBACAE,oBACAE,UAGJ5D,SAAgB8D,oB,IAEKC,E,2MACjB5D,MAAQ,CAAEO,KAAM,M,EAYhBsD,WAAa,WAET,OADiB,EAAK7D,MAAdO,KAEG,kBAAC,EAAD,MAEJ,kBAAC,EAAD,O,mFAfU,IAAD,OAChBa,KAAK0C,cAAgBjE,SAAgBkE,mBAAmB,SAACxD,GACrD,EAAKyD,SAAS,CAAEzD,a,6CAKpBa,KAAK0C,kB,+BAYL,OACI,yBAAKlD,UAAU,OACX,uBAAMiD,WAAN,MACA,kBAAC,IAAD,W,GAzBiBxC,aCjBb4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,EAAQ,IAAUC,SAElBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,KAAK,SAAA4E,GACjCA,EAAaC,iB","file":"static/js/main.50e48999.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport './SignIn.css';\nimport { toast } from 'react-toastify';\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport default class SignIn extends Component {\n    state = {}\n\n    onSignInClick = () => {\n        firebase.auth().signInWithPopup(provider).then((result) => {\n            toast.success(`Welcome ${result.user.displayName}!`);\n        }).catch((error) => {\n            toast.error(error.message);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex align-items-center sign-in-background\">\n                <Container>\n                    <Row>\n                        <Col>\n                            <h1>Bright Soft</h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h3>Employee Management System</h3>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={{ order: 2 }}>\n                            <button type=\"button\" onClick={this.onSignInClick} className=\"loginBtn loginBtn--google\">Sign in with Google</button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport './Home.css';\n\nexport default class Home extends Component {\n    state = {}\n\n    onLogoutClick = () => {\n        firebase.auth().signOut();\n    }\n\n    render() {\n        const { displayName, photoURL } = firebase.auth().currentUser;\n        return (\n            <Navbar bg=\"light\" expand=\"lg\" className=\"justify-content-between\">\n                <Navbar.Brand href=\"#\">BrightSoft EMS</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#\">Leave Annoucement</Nav.Link>\n                    </Nav>\n                    <Nav>\n                        <NavDropdown title={(\n                            <>\n                                {displayName}\n                                {' '}\n                                <img alt={displayName} src={photoURL} className=\"avatar\" />\n                            </>\n                        )}\n                        >\n                            <NavDropdown.Item onClick={this.onLogoutClick}>Sign Out</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport * as firebase from 'firebase/app';\nimport { ToastContainer } from 'react-toastify';\nimport SignIn from './screens/SignIn';\nimport Home from './screens/Home';\n\nconst {\n    REACT_APP_FIREBASE_API_KEY: apiKey,\n    REACT_APP_FIREBASE_AUTH_DOMAIN: authDomain,\n    REACT_APP_FIREBASE_DATABASE_URL: databaseURL,\n    REACT_APP_FIREBASE_PROJECT_ID: projectId,\n    REACT_APP_FIREBASE_STORAGE_BUCKET: storageBucket,\n    REACT_APP_FIREBASE_MESSAGING_SENDER_ID: messagingSenderId,\n    REACT_APP_FIREBASE_APP_ID: appId,\n} = process.env;\n\nfirebase.initializeApp({\n    apiKey,\n    authDomain,\n    databaseURL,\n    projectId,\n    storageBucket,\n    messagingSenderId,\n    appId,\n});\n\nfirebase.auth().useDeviceLanguage();\n\nexport default class App extends Component {\n    state = { user: null }\n\n    componentDidMount() {\n        this.unscribleUser = firebase.auth().onAuthStateChanged((user) => {\n            this.setState({ user });\n        });\n    }\n\n    componentWillUnmount() {\n        this.unscribleUser();\n    }\n\n    renderBody = () => {\n        const { user } = this.state;\n        if (user) {\n            return <Home />;\n        }\n        return <SignIn />;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <this.renderBody />\n                <ToastContainer />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}